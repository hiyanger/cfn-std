AWSTemplateFormatVersion: "2010-09-09"
Description: ALB,EC2

Parameters:
  sysname:
    Type: String

  TemplateS3ALB:
    Type: String
    Description: template ALB URL.

  BucketNameALB:
    Type: String

Resources:
  # ALB
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${sysname}-alb-sg
      GroupDescription: ALB SG
      VpcId: {Fn::ImportValue: !Sub "${sysname}-vpc"}
      Tags:
        - Key: Name
          Value: !Sub ${sysname}-alb-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  S3ALB:
    Type: AWS::CloudFormation::Stack #ネスト
    Properties:
      TemplateURL: !Ref TemplateS3ALB
      Parameters: 
        sysname: !Ref sysname
        BucketNameALB: !Sub ${sysname}-${BucketNameALB}

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing # インターネット用
      Name: !Sub ${sysname}-alb
      Tags:
        - Key: Name
          Value: !Sub ${sysname}-alb
      IpAddressType: ipv4
      Subnets: # 2つのサブネット必須
        - {Fn::ImportValue: !Sub "${sysname}-pubsub1"}
        - {Fn::ImportValue: !Sub "${sysname}-pubsub2"}
      SecurityGroups: 
        - !Ref ALBSG
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !GetAtt S3ALB.Outputs.S3ALB #下位テンプレートから受取

  ListenrHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
    
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${sysname}-tg
      Tags:
        - Key: Name
          Value: !Sub ${sysname}-tg
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      VpcId: {Fn::ImportValue: !Sub "${sysname}-vpc"}
      TargetType: instance
      Targets:
        - Id: !Ref EC2

  # EC2
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 SG
      GroupName: !Sub ${sysname}-ec2-sg
      VpcId: {Fn::ImportValue: !Sub "${sysname}-vpc"}
      Tags:
        - Key: Name
          Value: !Sub ${sysname}-ec2-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG #ALBのSGからアクセス許可

  EC2InstanceProfile: #IAMロール用のコンテナ
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub ${sysname}-ec2-profile

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub ${sysname}-ec2-role
      Tags:
        - Key: Name
          Value: !Sub ${sysname}-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Systems Managerのコア機能利用許可
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess # CloudWatchログ出力

  KeyPair: 
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${sysname}-keypair

  EC2:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${sysname}-ec2
      InstanceType: t3.nano # 無料枠を使いたい場合はt2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: false # パブリックIP割り当てなし
          DeviceIndex: 0 # 必須プロパティ ないとエラーになる
          GroupSet:
            - !Ref EC2SG
          SubnetId: {Fn::ImportValue: !Sub "${sysname}-prisub"}
      ImageId: resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyPair
      UserData: # アクセス確認用のnginxとCloudWatchLogs設定
        Fn::Base64: |
          #!/bin/bash
          sudo amazon-linux-extras install nginx1
          sudo systemctl enable nginx
          sudo systemctl start nginx
          sudo yum install -y awslogs
          sudo sed -i s/us-east-1/ap-northeast-1/ /etc/awslogs/awscli.conf /etc/awslogs/awscli.conf
          sudo systemctl start awslogsd

Outputs:
  EC2:
    Value: !Ref EC2
    Export:
      Name: !Sub ${sysname}-ec2