AWSTemplateFormatVersion: "2010-09-09"
Description: lambda to delete object in S3

Parameters:
  sysname:
    Type: String

Resources:
  S3DeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${sysname}-s3deletelambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  S3DeleteLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${sysname}-s3delete-lambda-function
      Role: !GetAtt S3DeleteLambdaRole.Arn
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 600
      Code:
        ZipFile: |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
      
          import json
          import boto3
          import requests # ベンダーバージョンのリクエストを削除
      
          def lambda_handler(event, context):
              try:
                  bucket = event['ResourceProperties']['BucketName']
          
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      for obj in bucket.objects.filter():
                          s3.Object(bucket.name, obj.key).delete()
                          bucket.object_versions.delete() # コード追加
          
                  sendResponseCfn(event, context, "SUCCESS")
              except Exception as e:
                  print(e)
                  sendResponseCfn(event, context, "FAILED")
          
          def sendResponseCfn(event, context, responseStatus):
              response_body = {'Status': responseStatus,
                               'Reason': 'Log stream name: ' + context.log_stream_name,
                               'PhysicalResourceId': context.log_stream_name,
                               'StackId': event['StackId'],
                               'RequestId': event['RequestId'],
                               'LogicalResourceId': event['LogicalResourceId'],
                               'Data': json.loads("{}")}
              requests.put(event['ResponseURL'], data=json.dumps(response_body))

Outputs:
  S3DeleteLambdaFunction:
    Value: !GetAtt S3DeleteLambdaFunction.Arn
    Export:
      Name: !Sub ${sysname}-s3delete-lambda-function